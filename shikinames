#!/usr/bin/env bash
# bash implementation of shikinames
source $(dirname $0)/consts

request_tokens () {
	# link to shikinames shikimori's authorization page
	echo Tokens were not found \(forced to update\), copy the link from authorization page:
	echo $AUTHORIZATION_PAGE
	echo and insert the authorization token
	read token

	# request for access and refresh tokens
	local result=$(curl -X POST "https://shikimori.one/oauth/token" \
		-H "User-Agent: shikinames" \
		-F grant_type="authorization_code" \
		-F client_id="atgTM364dtiQBh2uz5r5wbLaLjQesCKBCb3CvbHFPXA" \
		-F client_secret="WQu9MhHVx0OKs0yXe3BpT089M4QW3wwwRUGztq_q4JE" \
		-F code="${token}" \
		-F redirect_uri="urn:ietf:wg:oauth:2.0:oob")

	# parsing json for errors
	local err=$(echo "$result" | jq --raw-output ".error")
	if [[ $err != "null" ]] 
	then
		# returning error if something goes wrong
		echo $result
		exit 1 
	else
		# parsing json for tokens
		access=$(echo "$result" | jq --raw-output ".access_token")
		refresh=$(echo "$result" | jq --raw-output ".refresh_token")
		echo Tokens were acquired
	fi
} 

request_anime_json () {
	anime_json=$(curl -X GET "$URL$id" \
		-H "User-Agent: shikinames" \
		-H "Authorization: Bearer $access")
}

get_anime_json () {
	request_anime_json

	# parsing json for errors
	local err=$(echo "$anime_json" | jq --raw-output ".error")
	if [[ $err != "null" ]] 
	then
		# invalid token behavour
		echo $anime_json
		echo Your token is probaby invalid.
		echo Updating token...
		refresh_tokens
		request_anime_json
		local err=$(echo "$anime_json" | jq --raw-output ".error")
		if [[ $err != "null" ]] 
		then
			# something else more obscure happened
			echo $anime_json
			exit 1
		fi
	fi
}

get_names_from_json () {
	# name
	local name=$(echo $anime_json | jq --raw-output ".name")
	# english names
	local english="null"
	readarray -t english < <(echo $anime_json | jq --raw-output ".english[]")
	# russian name
	local russian=$(echo $anime_json | jq --raw-output ".russian")
	# synonyms
	local synonyms="null"
	readarray -t synonyms < <(echo $anime_json | jq --raw-output ".synonyms[]")

	#echo $name $english $russian $synonyms

	names_arr=("${name}")
	names_arr+=("${english[@]}")
	names_arr+=("${russian}")
	names_arr+=("${synonyms[@]}")
}

refresh_tokens () {
	local result=$(curl -X POST "https://shikimori.one/oauth/token" \
		-H "User-Agent: shikinames" \
		-F grant_type="refresh_token" \
		-F client_id="atgTM364dtiQBh2uz5r5wbLaLjQesCKBCb3CvbHFPXA" \
		-F client_secret="WQu9MhHVx0OKs0yXe3BpT089M4QW3wwwRUGztq_q4JE" \
		-F refresh_token="$refresh")

	local err=$(echo "$result" | jq --raw-output ".error")
	if [[ $err != "null" ]] 
	then
		# returning error if something goes wrong
		echo $result
		exit 1 
	else
		# parsing json for tokens
		access=$(echo "$result" | jq --raw-output ".access_token")
		refresh=$(echo "$result" | jq --raw-output ".refresh_token")
	fi
	write_tokens
}


create_cfg_file () {
	# creating config file (checking if it exists)
	if [[ -f "${CONFIG_PATH}" ]]
	then
		echo Config file already exists
	else
		mkdir -p "${CONFIG_FOLDER}"
		touch "${CONFIG_PATH}"
		echo Config file created in ${CONFIG_PATH}
	fi
}

get_tokens_from_cfg () {
	local cfg=$(cat ${CONFIG_PATH})
	access=$(echo $cfg | grep -Po "access=\K([a-zA-Z0-9-_]*[^;])")
	refresh=$(echo $cfg | grep -Po "refresh=\K([a-zA-Z0-9-_]*[^;])")
	# check if access is empty
	echo Tokens were successfully found
	echo $access $refresh
	if [[ $access = "" ]]
	then
		# if it is, then that means there were never a request
		request_tokens
		write_tokens
	fi
}

write_tokens () {
	# simply writing to the file
	echo -e "access=${access};\nrefresh=${refresh};" > \
		${CONFIG_PATH}
	echo Tokens were written to $CONFIG_PATH
	echo $(cat "$CONFIG_PATH")
}



get_id_from_link () {
	echo Input the link to the desired anime:
	read link 
	id=$(echo $link | grep -Po "/\K\d+")
	if [[ ${id} = "" ]]
	then
		echo You entered wrong link
		exit 1
	fi
	echo Link parsing successful
	echo anime id is $id 
}



make_form () {
	if [[ -n $mklist ]]
	then
		echo "$(make_list)"
		return 0
	fi
	for i in "${names_arr[@]}"
	do
		echo -e "$i"
	done
	if [[ -n $private ]]
	then
		echo -e "(Приват, чек закреп)"
	fi

	echo -e "\nShikimori"
	echo $link

	if [[ -n $sr ]]
	then
		if [[ $sr != '--' ]]
		then
			sr_query=${sr}
		fi
		echo -e "\nСерии доступны в боте эсеров по запросу"
		echo \`\`\`$sr_query\`\`\`
		echo Бот: https://t.me/sr_001_bot
		echo 1/?
	fi
}

get_sr_query () {
	echo It seems you\'ve chosen \'--\' as your -sr argument
	echo please input proper query here:
	read sr_query
}



make_list () {
	local id=$(($(echo $link | grep -Po "https://t.me/c/\d*/\K\d*")))	
	local main_l=$(echo $link | grep -Po "https://t.me/c/\d*/")
	for i in $(seq 1 ${mklist})
	do
		echo $i. $main_l$(($id+$i-1))
	done	
}
################################################# main functionality

# argv parser
for arg in "$@"
do
	IFS='=' read -ra arg <<< "$arg"
	if [[ "$arg" = "-h" ]] || [[ "$arg" = "--help" ]]
	then
		cat "$(dirname $0)/argv"
		exit 0
	fi
	if [[ "$arg" = "-c" ]] || [[ "$arg" = "--clipboard" ]]
	then
		clipboard=1
	fi
	if [[ "$arg" = "-p" ]] || [[ "$arg" = "--private" ]]
	then
		private=1
	fi
	if [[ "$arg" = "--sr" ]] || [[ "$arg" = "--sovetromantica" ]]
	then
		sr=${arg[1]}
		if [[ -z $sr ]]
		then
			echo usage:
			echo --sovetromantica=\<request\> or -sr=\<request\>
			exit 1
		fi
	fi
	if [[ "$arg" = "-s" ]] || [[ "$arg" = "--show" ]]
	then
		show=1
	fi
	if [[ "$arg" = "--make-list" ]]
	then
		mklist=${arg[1]}
		if [[ -z $mklist ]]
		then
			echo usage:
			echo --make-list=\<count of lines\>
			exit 1
		fi
	fi
	if [[ "$arg" = "--force-update" ]] || [[ "$arg" = "-f" ]]
	then
		force=1
	fi
done

if [[ -n $mklist ]]
then
	echo Input initial telegram link:
	read link
	parse_further=0
fi

if [[ -z $parse_further ]]
then
	if [[ -n $force ]]
	then
		request_tokens
		write_tokens
	fi
	get_id_from_link
	create_cfg_file
	if [[ -z $force ]]
	then
		get_tokens_from_cfg
	fi
	get_anime_json
	get_names_from_json
	if [[ -n $sr ]] && [[ $sr = "--" ]]
	then
		get_sr_query
	fi
fi

if [[ -n $clipboard ]]
then
	wl-copy "$(make_form)"  
	echo ""
	echo ==================================
	echo Result is copied to the clipboard.
	echo ==================================
	if [[ -n $show ]]
	then
		echo ""
		make_form
	fi
else
	echo ""
	make_form
fi

# todo:
# make a propper logging maybe?
# version
# argv parser support for multiple checks
